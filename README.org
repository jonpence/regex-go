#+TITLE: go-regex

A regular expressions engine written in Go.

** Algorithm
1. Accept a regular expression statement as input.
2. Parse the statement into a parse tree.
3. Construct a non-deterministic finite automaton from the parse tree.
4. Make the finite automaton deterministic.
5. Validate input strings.

** Grammar
The following LL(1) grammar will be used to recursively parse regular expression statements:

#+BEGIN_SRC
S → B C
C → “|” B C
C → ε
B → D E
E → “.” D E
E → ε
D → E F
F → “*” F
F → ε
E → letter
E → “ε”
E → “(” S “)”
#+END_SRC

** NFA Construction
- Construction of the non-deterministic finite automaton occurs recursively during the parse.
- Whenever a BAR, DOT, or STAR operator token is accepted, the parser combines the recursively constructed automaton substructures with the appropriate operation.
- See graph.go for NFA implementation.
- See parser.go for implementation.

** NFA to DFA Conversion
- TBD
