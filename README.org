#+TITLE: go-regex

A regular expressions engine written in Go.

** TO-DO
0. [X] Fix Makefile.
1. Unit test: [25%]
  * [X] parser
  * [-] automaton
  * [ ] regex
  * [ ] program
2. [ ] Test exhaustively with long regular expressions and edge case regular expressions.
3. [ ] Refactor and clean up code.
4. [ ] Comment code.
5. [ ] Improve terminal user interface.
6. [ ] Document usage/implementation details/motivation in README.
7. [ ] Add support for '+' and '?' operators.
8. [ ] Add implicit concatenation (i.e. remove necessity of explicit concatenation operator for concatenation to occur).

** Usage

*** How to Build
- ~make build~

*** Execution
- ~./rego~
- A menu will appear. You can add new regular expressions, delete them, or use them to validate strings.
- Regular expressions can be composed using the following operands/operators:
  + Any symbol can be an operand.
  + Expressions can be surrounded by parentheses to modify precedence.
  + concatenation: '.' between two sections will concatenate them.
  + or: '|' between two sections will designate that either section is valid.
  + kleene closure: '*' after a section will indicate that zero or more of that section is valid.
- In the future, additional unary operators '+' and '?' will be added.

** Implementation

*** Algorithm
1. Accept a regular expression statement as input.
2. Parse the statement into a parse tree.
3. Construct a non-deterministic finite automaton from the parse tree.
4. Make the finite automaton deterministic.
5. Validate input strings.

*** Grammar
The following LL(1) grammar will be used to recursively parse regular expression statements:

#+BEGIN_SRC
S → A B
A → C D
B → '|' A B | ε
C → E F
D → '.' C D | ε
E → letter | 'ε' | '(' S ')'
F → '*' F | ε
#+END_SRC

*** NFA Construction
- Construction of the non-deterministic finite automaton occurs recursively during the parse.
- Whenever a BAR, DOT, or STAR operator token is accepted, the parser combines the recursively constructed automaton substructures with the appropriate operation.
- See graph.go for NFA implementation.
- See parser.go for implementation.

*** NFA to DFA Conversion
- Start at the start state of the NFA, find the null-closure. Call this the initial state of the DFA.
- We will have a queue of DFA states and a set of DFA states so we can avoid repetitions.
- Now, we will iterate over all symbols of the NFA's alphabet. Each iteration we will produce a new state of the DFA as follows: Looking at each composite state of
  the DFA state, find the state(s) which are reachable by transitioning on whatever symbol we're iterating over. Add those states to a set, and call this set a
  new state of the DFA. Finally, check to see if any composite state of the new DFA state is the terminus of the NFA. If so, mark the new DFA state as terminating.
- Each time we find a new state of the DFA, check to see if we've seen it before. If we haven't, add it to the set and enqueue it.
- Repeatedly perform the above process on dequeued DFA states. Once the queue is empty and no new states are added, the construction is
  complete.

*** '+' and '?' operators
- The '+' operator is equivalent to the regex "A.A*" and reads as "one or more of A" where A is some arbitrary symbol.
- The '?' operator is equivalent to the regex "A|ε" and reads as "zero or one of A" where A is some arbitrary symbol.

*** String validation
- Take some string. We will iterate over its characters and use those characters as input to the DFA.
- Start at the 0th character. Start at the DFA's start state. Feed the DFA the 0th character. If there is a transition out of the initial DFA state on the 0th character, make the transition and move to the next iteration.
- Repeat this until all characters of the input string are used up. If, upon reaching the end of the input string, our current DFA state is a terminating state, then
  accept. Otherwise reject.
